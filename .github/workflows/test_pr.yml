name: VoronCI PR Test CI
run-name: "#${{github.event.number}} - ${{github.event.pull_request.title}}"
on:
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
    voron_ci:
      env:
        VORON_TOOLKIT_OUTPUT_DIR: ${{ github.workspace }}/workflow_output
        VORON_TOOLKIT_INPUT_DIR: ${{ github.workspace }}/tests/test_repository_root/printer_mods
        VORON_TOOLKIT_GH_STEP_SUMMARY: true
        VORON_TOOLKIT_VERBOSE: true
      runs-on: ubuntu-latest
      steps:
      - id: changed-files
        name: Get changed files üîÄ
        # Check out files, separate with newlines to catch whitespace in filenames
        uses: tj-actions/changed-files@v37
        with:
          separator: "\n"
      # Sanitize the file list
      - name: Sanitize file list üßπ
        id: sanitize_file_list
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          FILE_LIST_SANITIZE_INPUT: ${{ steps.changed-files.outputs.all_changed_files }}
        with:
          args: sanitize-file-list
      - name: Perform sparse checkout ‚Ü™Ô∏è
          # Perform a sparse checkout, checking out only the files of the PR
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          ref: ${{ github.ref }}
          path: ${{ github.workspace }}
          sparse-checkout: ${{ steps.sanitize_file_list.outputs.FILE_LIST_SANITIZE_OUTPUT }}
          sparse-checkout-cone-mode: false
      - name: Store PR number üî¢
        if: '!cancelled()'
        run: |
          mkdir -p ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
          echo -n ${{ github.event.number }} > ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}/pr_number.txt
      # Run whitespace checks based on files in the test directory
      - name: Check for whitespace in folders/filenames üîç
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          WHITESPACE_CHECKER_IGNORE_WARNINGS: false
        with:
          args: check-whitespace
      - name: Check correct mod/file structure üîç
        if: '!cancelled()'
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          MOD_STRUCTURE_CHECKER_IGNORE_WARNINGS: false
        with:
          args: check-mod-structure
      # Run the corruption checker
      - name: Check for STL corruption üîç
        if: '!cancelled()'
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          CORRUPTION_CHECKER_IGNORE_WARNINGS: false
        with:
          args: check-stl-corruption
      # Run the rotation checker
      - name: Check for incorrect STL rotation üîç
        if: '!cancelled()'
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          ROTATION_CHECKER_IGNORE_WARNINGS: true
          ROTATION_CHECKER_IMAGEKIT_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
          ROTATION_CHECKER_IMAGEKIT_SUBFOLDER: img
        with:
          args: check-stl-rotation
      # Generate a README
      - name: Generate README üìí
        if: '!cancelled()'
        uses: docker://ghcr.io/vorondesign/voron_toolkit_docker:latest
        env:
          README_GENERATOR_MARKDOWN: false
          README_GENERATOR_JSON: false
        with:
          args: generate-readme
      # Upload Artifact
      - name: Upload build artifacts üì¶
        uses: actions/upload-artifact@65d862660abb392b8c4a3d1195a2108db131dd05
        if: '!cancelled()'
        with:
          name: ci_output
          path: ${{ env.VORON_TOOLKIT_OUTPUT_DIR }}
